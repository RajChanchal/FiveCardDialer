// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import CoreGraphics;
@import Pageboy;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class TabmanBarBackgroundView;
@class TabmanIndicator;
@class NSCoder;

/// A bar that displays the current page status of a TabmanViewController.
SWIFT_CLASS("_TtC6Tabman9TabmanBar")
@interface TabmanBar : UIView
@property (nonatomic, readonly) CGSize intrinsicContentSize;
/// Background view of the bar.
@property (nonatomic, readonly, strong) TabmanBarBackgroundView * _Nonnull backgroundView;
/// The content view for the bar.
@property (nonatomic, readonly, strong) UIView * _Nonnull contentView;
/// Indicator for the bar.
@property (nonatomic, readonly, strong) TabmanIndicator * _Nullable indicator;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (void)addSubview:(UIView * _Nonnull)view;
/// Whether the bar should use preferredIndicatorStyle if available
///
/// returns:
/// Whether to use preferredIndicatorStyle
- (BOOL)usePreferredIndicatorStyle SWIFT_WARN_UNUSED_RESULT;
/// Reload and reconstruct the contents of the bar.
- (void)reloadData;
- (void)addWithIndicator:(TabmanIndicator * _Nonnull)indicator to:(UIView * _Nonnull)contentView;
/// Inform the TabmanViewController that an item in the bar was selected.
/// \param index The index of the selected item.
///
- (void)itemSelectedAt:(NSInteger)index;
@end


@interface TabmanBar (SWIFT_EXTENSION(Tabman))
@end


@interface TabmanBar (SWIFT_EXTENSION(Tabman))
@end


@interface TabmanBar (SWIFT_EXTENSION(Tabman))
@end


@interface TabmanBar (SWIFT_EXTENSION(Tabman))
@end


@interface TabmanBar (SWIFT_EXTENSION(Tabman))
@end


@interface TabmanBar (SWIFT_EXTENSION(Tabman))
@end


@interface TabmanBar (SWIFT_EXTENSION(Tabman))
@end


@interface TabmanBar (SWIFT_EXTENSION(Tabman))
@end


@interface TabmanBar (SWIFT_EXTENSION(Tabman))
@end


/// View that displays background styles for a TabmanBar.
SWIFT_CLASS("_TtC6Tabman23TabmanBarBackgroundView")
@interface TabmanBarBackgroundView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Indicator that highlights the currently visible page.
SWIFT_CLASS("_TtC6Tabman15TabmanIndicator")
@interface TabmanIndicator : UIView
/// Whether the indicator can support a progressive style.
@property (nonatomic, readonly) BOOL isProgressiveCapable;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)didMoveToSuperview;
- (void)constructIndicator;
@end


@interface TabmanIndicator (SWIFT_EXTENSION(Tabman))
@end

@class UIColor;

SWIFT_CLASS("_TtC6Tabman15TabmanSeparator")
@interface TabmanSeparator : UIView
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
/// The color of the separator.
@property (nonatomic, strong) UIColor * _Nonnull color;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
@end

@protocol UIViewControllerTransitionCoordinator;
@class NSBundle;

/// Page view controller with a bar indicator component.
SWIFT_CLASS("_TtC6Tabman20TabmanViewController")
@interface TabmanViewController : PageboyViewController
/// Whether any UICollectionView / UITableView in child view controllers should be
/// automatically insetted to display below the TabmanBar.
@property (nonatomic) BOOL automaticallyAdjustsChildScrollViewInsets;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface TabmanViewController (SWIFT_EXTENSION(Tabman))
@end


@interface TabmanViewController (SWIFT_EXTENSION(Tabman))
/// Embed the TabmanBar in an external view.
/// This will add the bar to the specified view, and pin the bar edges to the view edges.
/// \param view The view to embed the bar in.
///
- (void)embedBarInView:(UIView * _Nonnull)view;
/// Disembed the TabmanBar from an external view if it is currently embedded.
- (void)disembedBar;
@end


@interface TabmanViewController (SWIFT_EXTENSION(Tabman))
@end


@interface TabmanViewController (SWIFT_EXTENSION(Tabman))
/// Attach a TabmanBar that is somewhere in the view hierarchy.
/// This will replace the TabmanViewController managed instance.
/// \param bar The bar to attach.
///
- (void)attachWithBar:(TabmanBar * _Nonnull)bar;
/// Detach a currently attached external TabmanBar.
/// This will reinstate the TabmanViewController managed instance.
///
/// returns:
/// The detached bar.
- (TabmanBar * _Nullable)detachAttachedBar;
@end


@interface TabmanViewController (SWIFT_EXTENSION(Tabman))
@end


@interface TabmanViewController (SWIFT_EXTENSION(Tabman))
- (BOOL)bar:(TabmanBar * _Nonnull)bar shouldSelectItemAt:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (void)bar:(TabmanBar * _Nonnull)bar didSelectItemAt:(NSInteger)index;
@end


@interface TabmanViewController (SWIFT_EXTENSION(Tabman))
@end


@interface UIColor (SWIFT_EXTENSION(Tabman))
@end


@interface UIImage (SWIFT_EXTENSION(Tabman))
@end


@interface UIView (SWIFT_EXTENSION(Tabman))
@end


@interface UIView (SWIFT_EXTENSION(Tabman))
@end


@interface UIView (SWIFT_EXTENSION(Tabman))
@end


@interface UIViewController (SWIFT_EXTENSION(Tabman))
/// Indicates to the TabmanViewController that a child scroll view inset
/// needs to be updated.
/// This should be called if the contentInset of a UITableView or UICollectionView is changed
/// after viewDidLoad.
- (void)setNeedsScrollViewInsetUpdate;
@end

#pragma clang diagnostic pop
